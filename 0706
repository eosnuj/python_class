#은행 관리 시스템
#첫 화면에 메뉴 선택이 출력된다.
#1.입금
#2.출금
#3.잔액 조회
#4.예금주 정보
#5.계좌 이체
#6.종료


#이후 각 번호를 입력할 때마다 다음의 상호 작용이 가능해진다.
#1 입금의 경우
# 금액을 입력하고 성공적으로 입금됬다는 문자를 출력

#2 출금의 경우
#금액을 입력하고 성공적으로 출금됬다는 문자를 출력


#3 잔액 조회의 경우
#잔액을 출력

#4 에금주 정보 조회의 경우
# 예금주 이름,나이,성별 출력

#계좌 이체의 경우
# 이체할 계좌를 입력하고 이체 금액을 입력한다.
#만약 잔액이 부족하다면 잔액 부족 문자를 출력하고 메뉴로 돌아간다.

#6 종ㄹ료의 겨우
# 프로그램 종료 문자 출력 후 프로그램을 종료한다.

#각 메뉴를 시행 한 후에 다시 메뉴를 출력하고 입력받기를 반복한다.
# import random
#
# print('----------------------------------------')
# print('ㅣ'   '1.입금'   'ㅣ'   '2.출금'  'ㅣ'  '3.잔액 조회' 'ㅣ')
# print('----------------------------------------')
# print('ㅣ''4.예금주 정보' 'ㅣ'  '5.계좌 이체' 'ㅣ' '6.종료''ㅣ')
# print('---------------------------------------')
# dic={1:'입금',2:'출금',3:'잔액 조회',4:'예금주 정보',5:'계좌 이체',6:'종료'}
# s=int(input())
# print(dic[s])
# H=100000    #현재 소지 금액
# G=random.randint(1000,1000000)
# L=H+G or H-G
# T=300000   #이체할 계좌의 금액
# if s==1 :
#     print('금액을 입력하세요')
#     print(G)
#     print('입금되었습니다')
#     print('총금액:')
#     print(H+G)
# elif s==2 :
#     if H-G>=0 :
#         print('금액을 입력하세요')
#         print(G)
#         print('성공적으로 출금되었습니다')
#         print('잔액:')
#         print(H-G)
#     elif H-G<= 0 :
#         print('잔액이 부족합니다')
# elif s==3 :
#     print('남은 잔액은')
#     print(L)
#     print('원입니다')
# elif s==4 :
#     print('예금주 정보 조회를 실행합니다')
#     print('계좌 번호: 048321-******')
#     print('예금주 주인:김**')
#     print('예금주 생성 날짜 : 20**0714')
# elif s==5 :
#     if H-G>=0 :
#         print('이체할 금액을 작성해주십시오')
#         print(G)
#         print('성공적으로 이체되었습니다')
#         print('남은 금액은')
#         print(H-G)
#         print('원입니다')
#         print('계좌 T의')
#         print('총 금액은')     #계좌 T의 시점
#         print(H+G)
#         print('입니다')
#     elif H-G<=0:
#         print('잔액이 부족합니다')
# elif s==6 :
#     print('잠시 후 시스템을 종료합니다')





# import random
# def screen():
#     print('----------------------------------------')
#     print('ㅣ'   '1.입금'   'ㅣ'   '2.출금'  'ㅣ'  '3.잔액 조회' 'ㅣ')
#     print('----------------------------------------')
#     print('ㅣ''4.예금주 정보' 'ㅣ'  '5.계좌 이체' 'ㅣ' '6.종료''ㅣ')
#     print('---------------------------------------')
# def deposit():
#     print('금액을 입력하세요')
#     G = int(input())
#     print(G)
#     print('입금되었습니다')
#     print(H+G)
#     return H+G
# def withdraw():
#
#     print('금액을 입력하세요')
#     G = int(input())
#     if H - G >= 0:
#         print('성공적으로 출금되었습니다')
#         print('잔액:')
#         print(H-G)
#         return H-G
#     elif H-G<= 0 :
#         print('잔액이 부족합니다')
#         return H
# def Inquiry():
#     print('남은 잔액은')
#     print(H)
#     print('원입니다')
# def AHI():
#     print('예금주 정보 조회를 실행합니다')
#     print('계좌 번호: 048321-******')
#     print('예금주 주인:김**')
#     print('예금주 생성 날짜 : 20**0714')
# def accounttransfer():
#
#     print('이체할 금액을 작성해주십시오')
#     G = int(input())
#     print(G)
#     if H - G >= 0:
#         print('성공적으로 이체되었습니다')
#         print('남은 금액은')
#         print(H-G)
#         print('원입니다')
#         return H-G
#     elif H-G<=0:
#         print('잔액이 부족합니다')
#         return H
# def turnoff():
#     print('잠시 후 시스템을 종료합니다')
# H=100000    #현재 소지 금액
# while True :
#     screen()
#     dic={1:'입금',2:'출금',3:'잔액 조회',4:'예금주 정보',5:'계좌 이체',6:'종료'}
#     s=int(input())
#     print(dic[s])
#     if s==1:
#         H=deposit()
#     elif s==2:
#         H=withdraw()
#     elif s==3:
#         Inquiry()
#     elif s==4:
#         AHI()
#     elif s==5:
#         H=accounttransfer()
#     elif s==6:
#         turnoff()
#         break



#1.bank 클래스를 만들어서 은행시스템 구현하기
#2.tradelib 클래스를 만들어서 bank와 연결하기
#3.treadelib 클래스는 거래자명,거래 금액,거래 날짜가 적혀있음
#4.bank클래스에 '거래내역 조회'를 추가하여 tradelib 클래스르 통해 구현하기




class bank:
    def __init__(self,H):
        self.H=H
    def deposit(self):
        G=int(input())
        self.H=self.H+G
