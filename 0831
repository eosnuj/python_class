# def solution(picks,minerals):
#     md=ld(minerals,5)
#
#     costs=[]
#     for section in md:
#         cost=[0,0,0]
#         for mineral in section:
#             if mineral=="diamond":
#                 cost[0]+=1
#                 cost[1]+=5
#                 cost[2]+=25
#             elif mineral=="iron":
#                 cost[0] += 1
#                 cost[1] += 1
#                 cost[2] += 5
#             else:
#                 cost[0] += 1
#                 cost[1] += 1
#                 cost[2] += 1
#         costs.append(cost)
#     else:
#         while len(costs)>sum(picks):
#             costs.pop()
#
#     cs=sorted(costs, key=lambda x:x[2],reverse=True)
#     ci=0
#     for cost in cs:
#         if picks[0]>0:
#             ci+=cost[0]
#             picks[0]-=1
#             continue
#
#         if picks[1]>0:
#             ci+=cost[1]
#             picks[1]-=1
#             continue
#
#         if picks[2]>0:
#             ci+=cost[2]
#             picks[2]-=1
#
#     return ci
#
# def ld(tl:list,n:int):
#     return [tl[i:i+n] for i in range(0,len(tl),n)]
#
# print(solution([1, 3, 2],["diamond", "diamond", "diamond", "iron", "iron", "diamond", "iron", "stone"]))

# 캘 수 있는 광물의 개수
# 광물 조사
# 피로도가 높은 순서대로 광물 정렬
#피로도 계산
#
#
# from itertools import combinations_with_replacement
#
#
# def solution(n, info):
#     answer = [-1]
#     result_list = []
#     score_num = [0,1,2,3,4,5,6,7,8,9,10]
#     mx_board = [-1]
#     mx_gap = -1
#     for sl in list(combinations_with_replacement(score_num,n)):
#         lion = 0
#         appeach = 0
#
#         sb = [0 for _ in range(11)]
#         for score in sl:
#             sb[10 - score] += 1
#
#         for i in range(11):
#             if sb[i] == 0 and info[i] == 0:
#                 continue
#             if sb[i] > info[i]:
#                 lion += (10 - i)
#             else:
#                 appeach += (10 - i)
#
#         if lion > appeach:
#             gap = lion - appeach
#             if gap > mx_gap:
#                 mx_gap = gap
#                 mb = sb
#
#     return mb
#
#
# print(solution(9,[0,0,1,2,0,1,1,1,1,1,1]))


def solution(survey,choices):
    answer=''
    dic = {"R":0,"T":0,"C":0,"F":0,"J":0,"M":0,"A":0,"N":0}

    for s,c in zip(survey,choices):
        if c>4:
            dic[s[1]]+=c-4
        elif c<4:
            dic[s[0]]+=4-c

    li=list(dic.items())

    for i in range(0,8,2):
        if li[i][1]<li[i+1][1]:
            answer+=li[i+1][0]
        else:
            answer+=li[i][0]
    return answer



print(solution(["TR", "RT", "TR"],[7, 1, 3]))
#72410
