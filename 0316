# def calc(a,b,c=11):
# def froc():
#     print("lower scription"+a)
#     print(a+b+c)
# calc(1,5)
# froc()

#print(test_str.split())#지정된 문자열을 기준으로 여러개로 나누어 리스트로 저장하는 메소드
# test_str="Hello python, welcome to program!"
# print(test_str.split())
# print(test_str.replace("o","i"))
# print(",.!?".join(test_str))
# a=14
# if a==13:
#     print("0")
# elif a>=14:
#     print("1")
# else:
#     print("001")
# a=int(input())
# if a==1or a>=45:
#     print("0")
# elif 2<=a<=15:
#     print("1")
# else:
#     print("2")
# def grot(a,b,c,d,e=11,f=15):
#     print(a+b-c-d+e+f)
# 시퀀스 자료형

#리스트(배열,수열), 튜블, 딕셔너리,집합


#리스트= - list - []


#리스트 생성
# test_list=[1,2,3,4,"pop",3.14,True]
# #빈 리스트 생성
# lst_list=[]


#리스트 값 접근
# lst=[7,1,2,4]
# print(lst) # 리스트 전체 출력
# print(lst[3]) # 인덱싱을 이용한다
# print(lst[1:3]) # 슬라이싱도 유효함
# 리스트 값 추가
# lst=[7,1,2,4]
# #값 추가 메서드 : uppend,insert,extend
# print(lst)
#
# lst.append(90) #추가: 리스트의 맨 마지막 위치에 추가
# print(lst)
#
# lst.insert(3,200) # 삽입: 지정된 위치에 지정된 값을 삽입, 원본값들은 밀려남
# print(lst)
#
# lst.extend([10,20,30]) # 확장: 같은 시퀀스 자료형을 맨 마지막에 위치에 추가
# print(lst)
#리스트 값 수정
# st_lst=["a","b","c","d","e"]
# st_lst[3]="test"
# print(st_lst)
#
# #슬라이싱
# st_lst[1:3]=["x","y"]
# print(st_lst)

#리스트 값 삭제

#del, remove,pop

# lst = [7,1,2,4,8,0,10,3]
# print(lst)
#
# del lst[3] #인덱싱: 위치를 기반으로 삭제
# print(lst)
#
# lst.remove(0) # 탐색 : 해당 값 하나를 삭제
# print(lst)
#
# a=lst.pop() # 추출 : 아무것도 쓰지 않았을 경우 맨마지막값을 추출
# b=lst.pop(1) #값을 지정해 주었을 경우 그 위치의 값을 추출
#
# print(a,b)
# print(lst)
#del lst # 리스트자체 삭제
# #튜플  - tuple- ()
# tp =(1,6,9,0,"jp",1.1,False)
# # 다양한 튜플 생성 방식
# #tp2 = (5) #정수형으로 설정됨
# #print(type(tp2))
# tp3=(5,) #튜플로 설정됨
# print(type(tp3))
# tp4 = 5,22,4,1,6
# print(type(tp4))
# #빈 튜플 생성
# tp = ()
# print(type(tp5))

#튜플 값 접근
# tp(1,2,3,4,5)
# print(tp[4]) # 인덱싱
# print(tp[1:3]) # 슬라이싱
# 튜플의 값 추가 불가능!!!
# 튜플의 값 수정 불가능!!
# 튜플의 값 삭제 불가능? -->because 튜플 자체를 삭제 가능
#del tp
#튜플 총정리 튜플의 값 추가,수정,삭제 불가능 튜플 자체만 삭제 가능



# 딕셔너리 - dictionary - {:} ":"를 기준으로 key:value 한쌍이 값을 이룬다

#딕셔너리 생성
# dt1 = {"red":9, 13:"black", 2:0, "yellow":"green"}
# # 빈 딕셔너리 생성
# dt2 = {}
# print(type(dt2))
 #딕셔너리 값 접근
# dt1 = {"red":9, 13:"black", 2:0, "yellow":"green"}
# #print(dt1[13])
# print(dt1["red"])
#딕셔너리 값 추가
# dt1 = {"red":9, 13:"black", 2:0, "yellow":"green"}
# dt1[100]="blue" # 새로운 key값을 넣어 key:value의 형태로 추가한다

#딕셔너리 값 수정
# dt1 = {"red":9, 13:"black", 2:0, "yellow":"green"}
# dt1["yellow"]=80 #이미 존재하는 key값을 넣어 value값이 수정된다

#딕셔너리 값 삭제
# dt1 = {"red":9, 13:"black", 2:0, "yellow":"green"}
# print(dt1)
# del dt1["red"]
# print(dt1)

#딕셔너리 관련 메서드
# dt1 = {"red":9, 13:"black", 2:0, "yellow":"green"}
# a=dt1.keys() # 딕셔너리에 존쟂하는 모든 key값들을 불러온다
# b=dt1.valuses() # 딕셔너리에 존재하는 모든 value값들을 불러온다
# print(a)
# print(b)


# 집합 - set - {}

#집합의 생성
#st ={1,3,5,6,2}

#집합의 값 추가
# st= {1,2}
# st.add(7)
# st.update({8,9,0})
# print(st)

#집합의 값 접근, 수정 (불가능!!)

#집합이 값 삭제
# st={1,3,5}
# st.remove(3)
# print(st)

#집합의 특이점

# 1. 순서가 없음
#2. 값의 중복불가능


#시퀀스 자료형 형변환
# lst=[1,2,3]
# tp=tuple(lst)
# print(tp,lst,type(tp),type(lst))#tuple ->list
#
#
# lst=[1,2,3]
# tp=tuple(lst)
# print(tp,lst,type(tp),type(lst))#tuple ->list
#
#
#
# lst=[1,2,3]
# tp=tuple(lst)
# print(tp,lst,type(tp),type(lst))#tuple ->list
#
#
#
# tp=(1,2,3)
# st=set(tp)
# print(tp,st,type(tp),type(st))#tuple ->set
#
# #list <->tuple<->set


# dt=["red":1, "yellow":2,3:0]
# print(list(dt)) # dictionary -> list,tuple,set *key 값만

# lst1=["a","b","c"]
# lst2=[1,2,3]
# dt = dict(zip(list1,lst2)) # zip 함수 이용하여 lst,tuple -> dictionary
# print(dt)

#map 함수
# map(개별 실행을 할 함수, 개별 실행용 값)
# re=map(int,["1","2","3"])
# print(re)


# list(map(int,input()))
# print(lst)


#문제1 : 정수값 10개를 한줄에 하나씩 입력받아 리스트에 저장하기
#1-2 : 두번째 값을 삭제하기
#1-3 ; 맨 처음값을 맨 뒤로 옮기기
#1-4 : 리스트 중복값 제거
#1-5 : 리스트 내부의 값을 한줄에 하나씩 출력하기

list1=[]
l=int(input())
list1.append(l)
print(list1)
l2=int(input())
list1.append(l2)
print(list1)
l3=int(input())
list1.append(l3)
print(list1)
l4=int(input())
list1.append(l4)
print(list1)
l5=int(input())
list1.append(l5)
print(list1)
l6=int(input())
list1.append(l6)
print(list1)
l7=int(input())
list1.append(l7)
print(list1)
l8=int(input())
list1.append(l8)
print(list1)
l9=int(input())
list1.append(l9)
print(list1)
l10=int(input())
list1.append(l10)
print(list1) # 여기까지가 1

del list1[2]
print(list1) #여기까지가 1-2

del list1[0]
list1.append(1)
print(list1) # 여기까지 1-3

set1=set(list1)
print(list1) # 여기까지 1-4
